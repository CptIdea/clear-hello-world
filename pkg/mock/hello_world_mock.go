// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/domain/hello_world.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHelloWorldPrinter is a mock of HelloWorldPrinter interface.
type MockHelloWorldPrinter struct {
	ctrl     *gomock.Controller
	recorder *MockHelloWorldPrinterMockRecorder
}

// MockHelloWorldPrinterMockRecorder is the mock recorder for MockHelloWorldPrinter.
type MockHelloWorldPrinterMockRecorder struct {
	mock *MockHelloWorldPrinter
}

// NewMockHelloWorldPrinter creates a new mock instance.
func NewMockHelloWorldPrinter(ctrl *gomock.Controller) *MockHelloWorldPrinter {
	mock := &MockHelloWorldPrinter{ctrl: ctrl}
	mock.recorder = &MockHelloWorldPrinterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelloWorldPrinter) EXPECT() *MockHelloWorldPrinterMockRecorder {
	return m.recorder
}

// PrintHelloWorld mocks base method.
func (m *MockHelloWorldPrinter) PrintHelloWorld(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrintHelloWorld", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrintHelloWorld indicates an expected call of PrintHelloWorld.
func (mr *MockHelloWorldPrinterMockRecorder) PrintHelloWorld(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintHelloWorld", reflect.TypeOf((*MockHelloWorldPrinter)(nil).PrintHelloWorld), name)
}

// MockNameAsker is a mock of NameAsker interface.
type MockNameAsker struct {
	ctrl     *gomock.Controller
	recorder *MockNameAskerMockRecorder
}

// MockNameAskerMockRecorder is the mock recorder for MockNameAsker.
type MockNameAskerMockRecorder struct {
	mock *MockNameAsker
}

// NewMockNameAsker creates a new mock instance.
func NewMockNameAsker(ctrl *gomock.Controller) *MockNameAsker {
	mock := &MockNameAsker{ctrl: ctrl}
	mock.recorder = &MockNameAskerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNameAsker) EXPECT() *MockNameAskerMockRecorder {
	return m.recorder
}

// AskName mocks base method.
func (m *MockNameAsker) AskName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AskName indicates an expected call of AskName.
func (mr *MockNameAskerMockRecorder) AskName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskName", reflect.TypeOf((*MockNameAsker)(nil).AskName))
}
